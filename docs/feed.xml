<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Personal blog</title>
    <description></description>
    <link>https://maximilian.tech/</link>
    <atom:link href="https://maximilian.tech/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 23 Nov 2020 18:58:39 +0000</pubDate>
    <lastBuildDate>Mon, 23 Nov 2020 18:58:39 +0000</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>

    
      <item>
        <title>How to create architecture diagrams for Oracle Cloud infrastructure (OCI)</title>
        <description>&lt;p&gt;Sometimes, we need to visualize cloud architectures. Usually we do this to share, document and discuss architectural decisions with colleagues, partners or clients. This article will introduce and compare multiple options on how to visualize cloud architectures for Oracle Cloud Infrastructure. The following tools are available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Powerpoint&lt;/li&gt;
  &lt;li&gt;Diagrams.net (also known as draw.io)&lt;/li&gt;
  &lt;li&gt;OCI Designer ToolKit (OKIT)&lt;/li&gt;
  &lt;li&gt;visual-paradigm.com&lt;/li&gt;
  &lt;li&gt;Cacoo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;powerpoint&quot;&gt;Powerpoint&lt;/h2&gt;

&lt;p&gt;Powerpoint is the easiest and quickest way to create beautiful architectural diagrams for OCI. It’s the recommended ‘go-to’ option visualizing simple deployments. It also supports diagrams in ‘light mode’ and ‘dark mode’. The downside of designing architectures with Powerpoint is that it is not suited for complex architectures. Managing lot’s of objects without a proper layering system is annoying to work with. Also Powerpoint is limited when exporting diagrams (PPTX, PDF, PNG, JPEG).&lt;/p&gt;

&lt;p&gt;Download the &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/Resources/Assets/OCI_Icons.pptx&quot;&gt;OCI Powerpoint Icon Set&lt;/a&gt; to get started, it includes a sample architecture.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/oci-powerpoint.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;diagramsnet-also-known-as-drawio&quot;&gt;Diagrams.net (also known as draw.io)&lt;/h2&gt;

&lt;p&gt;This tool currently seems like the best option to visualize architectures for OCI. Diagrams.net is available as a browser-based tool at &lt;a href=&quot;https://diagrams.net&quot;&gt;diagrams.net&lt;/a&gt;, but also offers a &lt;a href=&quot;https://github.com/jgraph/drawio-desktop/releases/&quot;&gt;free desktop client&lt;/a&gt; for a number of platforms. It’s easy to use, yet quite powerful. The tool supports many file storage and synchronization tools and diagrams can be exported in many formats, such as PNG, SVG, JPEG and HTML. It supports a layering system to group resources. The only downside is that the OCI icon library is somewhat limited.&lt;/p&gt;

&lt;p&gt;To get started designing architectures for Oracle Cloud Infrastructure you need to download and import the OCI architecture icon library. Head over to &lt;a href=&quot;https://draw.io&quot;&gt;draw.io&lt;/a&gt; (or download the desktop application) and select &lt;strong&gt;File&lt;/strong&gt; → &lt;strong&gt;Open Library from&lt;/strong&gt; → &lt;strong&gt;URL&lt;/strong&gt; and enter &lt;code class=&quot;highlighter-rouge&quot;&gt;https://objectstorage.eu-frankfurt-1.oraclecloud.com/p/McExqfcEsJm8aHPUhenguP34LS9oAI0Qzzbm5sTXplQ-ySee8W_688WZPF-nhZMe/n/franqguxqsfs/b/public-resources/o/OCI_Icons_Drawio_Bark.drawio&lt;/code&gt;. Alternatively, you can use &lt;a href=&quot;https://objectstorage.eu-frankfurt-1.oraclecloud.com/p/mRHFjVorUCYMI5L8lSp-_Hc2F4Y7_9gnMOWvox0bNdpsqLE-x0VKjH17UDWk8P-3/n/franqguxqsfs/b/public-resources/o/oracle-cloud-architecture-icons-01-2019.xml&quot;&gt;these legacy icons&lt;/a&gt;. Also, make sure to enable &lt;a href=&quot;https://desk.draw.io/support/solutions/articles/16000067815-how-to-use-layers-&quot;&gt;layers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/diagrams-net-oci.png&quot; alt=&quot;Working with diagrams.net to design OCI architectures&quot; title=&quot;Working with diagrams.net to design OCI architectures&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;oci-designer-toolkit-okit&quot;&gt;OCI Designer ToolKit (OKIT)&lt;/h2&gt;

&lt;p&gt;OKIT is a tool designed specifically to design, deploy and visualize Oracle Cloud Infrastructure environments. It’s open source and available on &lt;a href=&quot;https://github.com/oracle/oci-designer-toolkit&quot;&gt;Github&lt;/a&gt;. It’s a great tool with a lot of potential, however it’s currently only available by running or self-hosting a Docker container (or Vagrant image). Also, it &lt;a href=&quot;https://github.com/oracle/oci-designer-toolkit/blob/master/documentation/Usage.md#currently-implemented-artifacts&quot;&gt;currently does not support&lt;/a&gt; all Oracle Cloud resources. On the contrary, it is much more powerful than other visualization tools, since it can automatically create Terraform and Ansible configurations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/okit.png&quot; alt=&quot;Working with OKIT to design OCI architectures&quot; title=&quot;Working with OKIT to design OCI architectures&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;visual-paradigmcom&quot;&gt;Visual-paradigm.com&lt;/h2&gt;

&lt;p&gt;There is also visual-paradigm.com, which offers some out-of-the-box OCI visualizations. I’ve personally never tried it, since it’s not open source and only offers a limited free version. It does however provide multiple sample diagrams and overall seems like a well designed tool.&lt;/p&gt;

&lt;p&gt;You can get started designing OCI architectures with visual-paradigm-com &lt;a href=&quot;https://online.visual-paradigm.com/diagrams/features/oracle-cloud-infrastructure-diagram-software/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/visual-paradigm-oci.png&quot; alt=&quot;Working with Powerpoint to design OCI architectures&quot; title=&quot;Working with Powerpoint to design OCI architectures&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;cacoo&quot;&gt;Cacoo&lt;/h2&gt;

&lt;p&gt;Finally there is Cacoo, which also offers out-of-the-box OCI visualizations. Like visual-paradigm I’ve not personally tried it, since it’s neither open source nor completely free. You can get started with Cacoo modeling for &lt;a href=&quot;https://cacoo.com/templates/oracle-cloud-infrastructure-template&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/oci-cacoo.png&quot; alt=&quot;Working with Cacoo to design OCI architectures&quot; title=&quot;Working with Cacoo to design OCI architectures&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;even-more-options&quot;&gt;Even more options&lt;/h2&gt;

&lt;p&gt;Check out the official site for Oracle Cloud Infrastructure icons and graphics &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/General/Reference/graphicsfordiagrams.htm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That’s it. If you have found a better way to design and visualize OCI architectures, feel free drop me an email or comment below.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Nov 2020 16:00:05 +0000</pubDate>
        <link>https://maximilian.tech/2020/11/22/how-to-create-architecture-diagrams-for-oracle-cloud-infrastructure-oci/</link>
        <guid isPermaLink="true">https://maximilian.tech/2020/11/22/how-to-create-architecture-diagrams-for-oracle-cloud-infrastructure-oci/</guid>
      </item>
    
      <item>
        <title>How to delete subnets and virtual cloud networks (when deletion fails) in Oracle Cloud Infrastructure</title>
        <description>&lt;p&gt;Terminating virtual cloud networks and subnets in Oracle Cloud Infrastructure (OCI) is usually pretty straight forward. However, you might encounter this error:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The VCN cannot be terminated because there are associated resources in one or more compartments that you do not have access to.
(Conflict - &lt;strong&gt;The Subnet ocid1.subnet… references the VNIC  coid1.vniic… You must remove the reference to proceed with this operation.)&lt;/strong&gt;
The process has been stopped. Resources terminated up to this point cannot be restored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/error-vnic-ocid.png&quot; alt=&quot;OCI error deleting virtual cloud network&quot; title=&quot;OCI error deleting virtual cloud network&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This error signals that there is a VNIC (virtual network interface card) that exists in your subnet. And because there is still a VNIC in your subnet, the subnet (and the virtual cloud network) cannot be deleted.&lt;/p&gt;

&lt;p&gt;VNICs are automatically created with the following cloud resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Compute instances&lt;/li&gt;
  &lt;li&gt;Load balancers&lt;/li&gt;
  &lt;li&gt;Database systems&lt;/li&gt;
  &lt;li&gt;API gateways&lt;/li&gt;
  &lt;li&gt;Mount targets (for file storage)&lt;/li&gt;
  &lt;li&gt;And basically everything else that exists in a subnet and has an IPv4 address&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-find-the-vnic-and-associated-cloud-resouce&quot;&gt;How to find the VNIC and associated cloud resouce&lt;/h2&gt;

&lt;p&gt;Let’s find the VNIC and the associated cloud resource. Copy the VNIC OCID (Oracle Cloud Identifier) from the error message and paste it into the search bar in the top navigation bar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/search-vnic.png&quot; alt=&quot;OCI search for VNIC&quot; title=&quot;How to search for a VNIC in OCI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In our case the search reveals that the VNIC is associated to a load balancer, because the name of the VNIC is &lt;code class=&quot;highlighter-rouge&quot;&gt;VNIC for LB&lt;/code&gt;. Should your VNIC be associated with a compute instance, then you can directly click on the VNIC to find the compute instance.&lt;/p&gt;

&lt;p&gt;In case you are still having troube finding out, which resource the VNIC is attached to try to click ‘View all’ within the search results. Within the resource search results you can see the details of the VNIC and associated resouces (see screenshot below). Also check out the &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/Network/Troubleshoot/subnetdelete.htm&quot;&gt;official documentation article&lt;/a&gt; for this problem.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/search-results.png&quot; alt=&quot;resource search results&quot; title=&quot;OCI resource search results&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-destroy-the-associated-cloud-resource&quot;&gt;How to destroy the associated cloud resource&lt;/h2&gt;

&lt;p&gt;There is no need to destroy the VNIC itself, it’s better to destroy the associated cloud resource. In our case, we head over to the load balancer section (Menu -&amp;gt; Networking -&amp;gt; Load Balancers) and delete the “problematic” load balancer. Alternatively, you can copy and paste the loadbalancer OCID into the search bar to find it more quickly.&lt;/p&gt;

&lt;p&gt;Done! Now, we can delete our virtual cloud network or subnet without problem.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Nov 2020 12:59:02 +0000</pubDate>
        <link>https://maximilian.tech/2020/11/13/how-to-delete-subnets-and-virtual-cloud-networks-when-deletion-fails-in-oci/</link>
        <guid isPermaLink="true">https://maximilian.tech/2020/11/13/how-to-delete-subnets-and-virtual-cloud-networks-when-deletion-fails-in-oci/</guid>
      </item>
    
      <item>
        <title>Tutorial: How to setup Terraform for Oracle Cloud Infrastructure (OCI) to create a simple web server</title>
        <description>&lt;p&gt;In this article we will cover how to get started with a basic Terraform setup in Oracle Cloud Infrastructure (OCI) to create a simple web server. This tutorial can be done using the &lt;a href=&quot;https://www.oracle.com/cloud/free/&quot;&gt;Always Free Tier&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This tutorial has been tested with Terraform v0.13.4 and will be updated for future releases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;1-installing-terraform-cli&quot;&gt;1) Installing Terraform CLI&lt;/h2&gt;

&lt;p&gt;The first step is to install Terraform CLI. If you are using MacOS you can simply run &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install terraform&lt;/code&gt;. For other platforms follow the official instructions &lt;a href=&quot;https://learn.hashicorp.com/tutorials/terraform/install-cli&quot;&gt;here&lt;/a&gt;. You can verify your installation by running &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform version&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-preparing-for-our-first-terraform-script&quot;&gt;2) Preparing for our first Terraform script&lt;/h2&gt;

&lt;p&gt;Before we can get started we need the following credentials and &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm&quot;&gt;OCIDs&lt;/a&gt; (Oracle Cloud Identifiers):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Tenancy OCID&lt;/strong&gt;: Open the Oracle Cloud top right profile menu and click Tenancy. Note the OCID as described &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/identifiers.htm#tenancy_ocid&quot;&gt;here&lt;/a&gt;, as we will need it later.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;User OCID&lt;/strong&gt;: Open the Oracle Cloud top right profile menu and click on User settings. Copy the OCID as described &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/API/Concepts/apisigningkey.htm#five&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Region identifier&lt;/strong&gt;: Next we need the region where we want to deploy resources. E.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;eu-frankfurt-1&lt;/code&gt;, all region identifiers can be found &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/General/Concepts/regions.htm#About&quot;&gt;here&lt;/a&gt;. If you are using the &lt;em&gt;Alway Free Tier&lt;/em&gt; you must choose your &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/Identity/Tasks/managingregions.htm#The&quot;&gt;home region&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you have already configured the OCI CLI you can skip the next step. Your private key has already been setup and is located at &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.oci/oci_api_key.pem&lt;/code&gt;. You can find your fingerprint by opening the top right profile menu, clicking &lt;strong&gt;User settings&lt;/strong&gt; and then choosing &lt;strong&gt;API Keys&lt;/strong&gt; in the bottom left corner.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally, we need to make sure that we have uploaded an API signing key to the Oracle Cloud dashboard. You can check this by opening the top right profile menu, clicking &lt;strong&gt;User settings&lt;/strong&gt; and then choosing &lt;strong&gt;API Keys&lt;/strong&gt; in the bottom left corner. If you have not yet added a public key, follow the instructions &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/Functions/Tasks/functionssetupapikey.htm&quot;&gt;here&lt;/a&gt; to add a public/private key pair. To configure Terraform we need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;API key fingerprint&lt;/strong&gt;: This is displayed in the cloud console section, where we uploaded the API key&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Path to our private key&lt;/strong&gt;: The location of our private key on our local machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-testing-your-setup-with-a-basic-terraform-script&quot;&gt;3) Testing your setup with a basic Terraform script&lt;/h2&gt;

&lt;p&gt;To test that all credentials are correct, we will run a &lt;a href=&quot;https://objectstorage.eu-frankfurt-1.oraclecloud.com/p/YW3pknrFQlw37eknN1toi6YezuH8WLqjXBO69kTKnxsbgNJGuasyokZWKGDcfW5W/n/franqguxqsfs/b/public-resources/o/minimal-oci.tf&quot;&gt;minimal Terraform configuration&lt;/a&gt;. This Terraform script will not create or modify any cloud resources (it only lists information about the availability domains).&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Create a new folder and change directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;minimal-terraform-config
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;minimal-terraform-config

&lt;span class=&quot;c&quot;&gt;# Download the minimal Terraform configuration&lt;/span&gt;
curl https://objectstorage.eu-frankfurt-1.oraclecloud.com/p/YW3pknrFQlw37eknN1toi6YezuH8WLqjXBO69kTKnxsbgNJGuasyokZWKGDcfW5W/n/franqguxqsfs/b/public-resources/o/minimal-oci.tf &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; minimal-oci.tf

&lt;span class=&quot;c&quot;&gt;# Initialize the Terraform provider (it downloads Oracle Cloud specific binaries)&lt;/span&gt;
terraform init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see a message &lt;code class=&quot;highlighter-rouge&quot;&gt;Terraform has been successfully initialized!&lt;/code&gt;. Now, we must set the environment variables to authenticate our local Terraform installation with our Oracle Cloud account. Set your environment variables by running the following command (you need to fill in your values):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TF_VAR_tenancy_ocid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ocid1.tenancy.oc1..aaaaaaaabu74o24dtegtq53thm2oxsx5mr6wbhtwefaos2rfwmzbtrujb3ya
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TF_VAR_user_ocid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ocid1.user.oc1..aaaaaaaax5isirkhfebc5bbijbrkdh2acm4tbmhatkc2ijmiftizzjh2tgcq
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TF_VAR_fingerprint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10:b9:c2:2a:09:93:42:1f:a2:2d:2e:d0:3b:04:29:79
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TF_VAR_private_key_path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/me/.oci/oci_api_key.pem
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TF_VAR_region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eu-frankfurt-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If your private key is encrypted with a password, you must create another variable &lt;code class=&quot;highlighter-rouge&quot;&gt;export TF_VAR_private_key_path=mypassword&lt;/code&gt; and reference it in your configuration.&lt;/p&gt;

&lt;p&gt;Finally, run a &lt;code class=&quot;highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; to validate that everything has been setup correctly. If you get a message &lt;code class=&quot;highlighter-rouge&quot;&gt;Apply complete! Resources: 0 added, 0 changed, 0 destroyed.&lt;/code&gt; then you have successfully installed and configured Terraform!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you get an error message such as &lt;code class=&quot;highlighter-rouge&quot;&gt;provider.oci: can not create client, bad configuration: did not find a proper configuration for private key&lt;/code&gt;, you might have missed one of these things:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Not specifying either a private_key or private_key_path in the config&lt;/li&gt;
    &lt;li&gt;Specifying a private_key_path that’s not a valid path to a private key file&lt;/li&gt;
    &lt;li&gt;Not specifying a private_key_password for a private key that’s encrypted&lt;/li&gt;
    &lt;li&gt;Specifying an incorrect private_key_password for an encrypted private key&lt;/li&gt;
    &lt;li&gt;Set up your API key incorrectly&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;For more info check &lt;a href=&quot;https://registry.terraform.io/providers/hashicorp/oci/latest/docs&quot;&gt;docs&lt;/a&gt; or the &lt;a href=&quot;https://github.com/terraform-providers/terraform-provider-oci&quot;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-deploying-a-simple-web-server-with-terraform&quot;&gt;4) Deploying a simple web server with Terraform&lt;/h2&gt;

&lt;p&gt;Now that we have validated our Terraform setup, we can move on to deploy our first application with Terraform. This Terraform script will deploy a set of networking resources and a virtual machine with a simple webserver installed.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Download the Terraform scripts&lt;/span&gt;
git clone git@github.com:m1nka/oci-terraform-simple-web-server.git

&lt;span class=&quot;c&quot;&gt;# Change directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;oci-terraform-simple-web-server

&lt;span class=&quot;c&quot;&gt;# Plan and run your Terraform scripts&lt;/span&gt;
terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You might get a message asking you to provide a value for &lt;code class=&quot;highlighter-rouge&quot;&gt;var.compartment_ocid&lt;/code&gt;. In this case, we need to find a &lt;a href=&quot;https://docs.cloud.oracle.com/en-us/iaas/Content/Identity/Tasks/managingcompartments.htm&quot;&gt;compartment&lt;/a&gt; where we can deploy our resources. Go to the Oracle Cloud console and open the main menu (top left corner). Scroll down and choose “Identity” -&amp;gt; “Compartments”. Choose the compartment you would like to use and copy the compartment OCID. Make sure your user has sufficient permission to create the cloud resources in that compartment. You can set the environment variable by running:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TF_VAR_compartment_ocid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ocid1.compartment.oc1..aaaaaaaac6uytbhiw5lsnx6lbdlw7bajgf7uhoitnn7ryknuhyi5fdw537sa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s it. The web server will be online in a matter of minutes.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Nov 2020 15:22:52 +0000</pubDate>
        <link>https://maximilian.tech/2020/11/04/tutorial-how-to-setup-terraform-for-oracle-cloud-infrastructure-oci-to-create-a-simple-web-server/</link>
        <guid isPermaLink="true">https://maximilian.tech/2020/11/04/tutorial-how-to-setup-terraform-for-oracle-cloud-infrastructure-oci-to-create-a-simple-web-server/</guid>
      </item>
    
      <item>
        <title>Meetup: Using Terraform in the real-world</title>
        <description>&lt;p&gt;On October 20th 2020 I had the chance to talk at Enterprise Java User Group Austria’s online &lt;a href=&quot;https://www.meetup.com/Enterprise-Java-User-Group-Austria/events/273258102/&quot;&gt;meetup&lt;/a&gt;. There were two talks:&lt;/p&gt;

&lt;h4 id=&quot;taking-micronaut-out-for-a-spin---from-andres-almiray&quot;&gt;Taking Micronaut out for a spin - from &lt;a href=&quot;http://andresalmiray.com/&quot;&gt;Andres Almiray&lt;/a&gt;&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Micronaut is a modern JVM framework for developing applications (web apps, micro services, CLI, etc) using Java, Groovy, or Kotlin. Micronaut is built from scratch using AoT (Ahead of Time) compilation that avoids any run time reflection. This allows Micronaut applications to start up really fast and consume very little memory. Pair it with GraalVM’s Native Image and you get a winning combination for lean deployment and even faster startup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can find Andres’ slides &lt;a href=&quot;https://www.slideshare.net/aalmiray/taking-micronaut-out-for-a-spin&quot;&gt;on Slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;using-terraform-in-the-real-world-lessons-learned&quot;&gt;Using Terraform in the real-world: Lessons learned&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;While Terraform presents powerful mechanisms to automate cloud infrastructure it does have its limitations and pitfalls. This talk focuses on lessons learned when managing large production environments with Terraform. We talk about some Terraform basics, managing Terraform state, version control, collaboration, configuration drift, variables and integration with other DevOps tools such as Ansible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Please find the slides for the second talk below. I will publish the slides in form of an article soon ;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://objectstorage.eu-frankfurt-1.oraclecloud.com/p/CHBt9pzMxO5TSg46MacVI-jBZqwv8w8WMHSwC57UZrjoCzli1xhFlBnWIMYDbUqL/n/franqguxqsfs/b/public-resources/o/using-terraform-in-the-real-world.pdf&quot;&gt;Terraform in the real-world - PDF&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Oct 2020 19:45:55 +0000</pubDate>
        <link>https://maximilian.tech/2020/10/19/meetup-using-terraform-in-the-real-world/</link>
        <guid isPermaLink="true">https://maximilian.tech/2020/10/19/meetup-using-terraform-in-the-real-world/</guid>
      </item>
    
    
    

  </channel>
</rss>